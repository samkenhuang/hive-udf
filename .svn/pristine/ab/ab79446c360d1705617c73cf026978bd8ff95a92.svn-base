package com.huangxin.hive;

import org.apache.hadoop.hive.ql.exec.Description;
import org.apache.hadoop.hive.ql.exec.UDFArgumentException;
import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;
import org.apache.hadoop.hive.ql.metadata.HiveException;
import org.apache.hadoop.hive.ql.udf.generic.GenericUDF;
import org.apache.hadoop.hive.serde2.objectinspector.*;
import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
import org.apache.hadoop.io.ArrayWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;



/**
 * Created by huangxin on 2018/06/21
 */
@Description(name = "PingguProvinceFieldTopN", value = "_FUNC_(field_str, topN) - convert string like " +
        "`anhui:0.831966817379,chongqqing:0.168033197522,jiangxi:0.01`  to target [{},{}] array by number 2")
public class PingguProvinceFieldTopN extends GenericUDF {
    private IntWritable topN;
    private Text text;
    private StandardListObjectInspector stdListObjInspector;
    private StandardMapObjectInspector stdMapObjInspector;
    private ArrayList<Map<String, Double>> resList = new ArrayList<>();

    public PingguProvinceFieldTopN() {}

    @Override
    public Object evaluate(DeferredObject[] args) throws HiveException {
        Object[] o = new Object[topN.get()];
        String[] pair = text.toString().split(",");
        for (int i = 0; i < pair.length; i ++) {
            String[] kv = pair[i].split(":");
            resList.add(new HashMap() {{
                put(kv[0], Double.parseDouble(kv[1]));
            }});
        }


        return o;
    }

    @Override
    public String getDisplayString(String[] args) {
        StringBuilder sb = new StringBuilder("combine( ");
        for (int i = 0; i < args.length - 1; ++i) {
            sb.append(args[i]);
            sb.append(",");
        }
        sb.append(args[args.length - 1]);
        sb.append(")");
        return sb.toString();
    }

    @Override
    public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumentException {
        if (arguments.length != 2) {
            throw new UDFArgumentLengthException(
                    "The function PingguProvinceFieldTopN(fieldStr, topN) take exactly 2 arguments."
            );
        }
        this.text = (Text) ObjectInspectorUtils.getWritableConstantValue(arguments[0]);
        this.topN = (IntWritable) ObjectInspectorUtils.getWritableConstantValue(arguments[1]);

        ArrayList structFieldNames = new ArrayList();
        ArrayList structFieldObjectInspectors = new ArrayList();
        structFieldNames.add("province");
        structFieldNames.add("ratio");
        structFieldObjectInspectors.add(PrimitiveObjectInspectorFactory.writableStringObjectInspector);
        structFieldObjectInspectors.add(PrimitiveObjectInspectorFactory.writableDoubleObjectInspector);
        StructObjectInspector si = ObjectInspectorFactory.getStandardStructObjectInspector(
                structFieldNames, structFieldObjectInspectors);
        return si;
    }




}

